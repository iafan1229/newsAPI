{"version":3,"sources":["components/NewsItem.js","components/NewsList.js","components/Categories.js","App.js","serviceWorker.js","index.js"],"names":["NewsItemBlock","styled","div","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","classNAme","NewsListBlock","NewsList","category","useState","articles","setArticles","loading","setLoading","useEffect","a","query","axios","get","response","data","console","log","fetchData","map","key","categories","name","text","CategoriesBlock","Category","props","active","css","Categories","onSelect","c","onClick","App","setCategory","useCallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"w1BAGA,IAAMA,EAAgBC,IAAOC,IAAV,KAqDJC,EAvBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACVC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,IAAKC,EAAeJ,EAAfI,WACjC,OACE,kBAACR,EAAD,KACGQ,GACC,yBAAKC,UAAU,aACb,uBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAChC,yBAAKC,IAAKL,EAAYM,IAAI,gBAIhC,yBAAKC,UAAU,YACb,4BACE,uBAAGL,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAC/BP,IAGL,2BAAIC,M,yTC7CZ,IAAMU,EAAgBf,IAAOC,IAAV,KAsDJe,EAzCE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACDC,mBAAS,MADR,mBAC1BC,EAD0B,KAChBC,EADgB,OAEHF,oBAAS,GAFN,mBAE1BG,EAF0B,KAEjBC,EAFiB,KAuBjC,OAnBAC,qBAAU,YAEO,uCAAG,8BAAAC,EAAA,6DAChBF,GAAW,GADK,SAGRG,EAAqB,QAAbR,EAAqB,GAArB,oBAAuCA,GAHvC,SAISS,IAAMC,IAAN,wDAC4BF,EAD5B,6CAJT,OAIRG,EAJQ,OAOdR,EAAYQ,EAASC,KAAKV,UAPZ,gDASdW,QAAQC,IAAR,MATc,QAWhBT,GAAW,GAXK,yDAAH,qDAafU,KACC,CAACf,IAGAI,EACK,kBAACN,EAAD,+BAGJI,EAMH,kBAACJ,EAAD,KACGI,EAASc,KAAI,SAAA9B,GAAO,OACnB,kBAAC,EAAD,CAAU+B,IAAK/B,EAAQG,IAAKH,QAASA,QAPlC,M,+wBC3CX,IAAMgC,EAAa,CACf,CACIC,KAAM,MACNC,KAAM,4BAEV,CACID,KAAM,WACNC,KAAM,4BAEV,CACID,KAAM,gBACNC,KAAM,wCAEV,CACID,KAAM,SACNC,KAAM,gBAEV,CACID,KAAM,UACNC,KAAM,gBAEV,CACID,KAAM,SACNC,KAAM,sBAEV,CACID,KAAM,aACNC,KAAM,iBAIRC,EAAkBtC,IAAOC,IAAV,KAWfsC,EAAWvC,IAAOC,IAAV,KAYR,SAAAuC,GAAK,OACPA,EAAMC,QAAUC,YAAhB,QA6BWC,EAhBI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAU3B,EAAe,EAAfA,SAC5B,OACI,kBAACqB,EAAD,KACKH,EAAWF,KAAI,SAAAY,GAAC,OACb,kBAACN,EAAD,CACAL,IAAKW,EAAET,KACPK,OAAQxB,IAAa4B,EAAET,KACvBU,QAAS,kBAAMF,EAASC,EAAET,QAErBS,EAAER,WCjERU,EAXH,WAAO,IAAD,EACgB7B,mBAAS,OADzB,mBACTD,EADS,KACC+B,EADD,KAEVJ,EAAWK,uBAAY,SAAAhC,GAAQ,OAAI+B,EAAY/B,KAAW,IAChE,OACA,oCACA,kBAAC,EAAD,CAAYA,SAAUA,EAAU2B,SAAUA,IAC1C,kBAAC,EAAD,CAAU3B,SAAUA,MCEFiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.76d80716.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NewsItemBlock = styled.div`\r\n    display: flex;\r\n    .thumbnail {\r\n        margin-right: 3rem;\r\n        img {\r\n            display:block;\r\n            width: 160px;\r\n            height: 100px;\r\n            object-fit: cover;\r\n        }\r\n    }\r\n    .contents {\r\n        h2 {\r\n            margin:0;\r\n        }\r\n        a {\r\n            color: black;\r\n        }\r\n    }\r\n    p {\r\n        margin: 0;\r\n        line-height: 1.5;\r\n        margin-top: 0.5rem;\r\n        white-space: normal;\r\n    }\r\n    }\r\n    & + & {\r\n        margin-top: 3rem;\r\n    }\r\n    `;\r\nconst NewsItem = ({ article }) => {\r\n  const { title, description, url, urlToImage } = article;\r\n  return (\r\n    <NewsItemBlock>\r\n      {urlToImage && (\r\n        <div className=\"thumbnail\">\r\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src={urlToImage} alt=\"thumbnail\" />\r\n          </a>\r\n        </div>\r\n      )}\r\n      <div classNAme=\"contents\">\r\n        <h2>\r\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {title}\r\n          </a>\r\n        </h2>\r\n        <p>{description}</p>\r\n      </div>\r\n    </NewsItemBlock>\r\n  );\r\n};\r\n\r\nexport default NewsItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NewsItem from \"./NewsItem\";\r\nimport axios from \"axios\";\r\n\r\nconst NewsListBlock = styled.div`\r\n  box-sizing: border-box;\r\n  padding-bottom: 3rem;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  margin-top: 2rem;\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n  }\r\n`;\r\n\r\nconst NewsList = ({ category }) => {\r\n  const [articles, setArticles] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // async를 사용하는 함수 따로 선언\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const query = category === 'all' ? '' : `&category=${category}`;\r\n        const response = await axios.get(\r\n          `http://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=f51580d2a7974d83b8cc0d641476d0e2`,\r\n        );\r\n        setArticles(response.data.articles);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [category]);\r\n\r\n  //대기 중일 때\r\n  if (loading) {\r\n    return <NewsListBlock>대기 중...</NewsListBlock>;\r\n  }\r\n  // 아직 articles 값이 설정되지 않았을 때\r\n  if (!articles) {\r\n    return null;\r\n  }\r\n\r\n  //article 값이 유효할 때\r\n  return (\r\n    <NewsListBlock>\r\n      {articles.map(article => (\r\n        <NewsItem key={article.url} article={article} />\r\n      ))}\r\n    </NewsListBlock>\r\n  );\r\n};\r\n\r\nexport default NewsList;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst categories = [\r\n    {\r\n        name: 'all',\r\n        text: '전체보기'\r\n    },\r\n    {\r\n        name: 'business',\r\n        text: '비즈니스'\r\n    },\r\n    {\r\n        name: 'entertainment',\r\n        text: '엔터테인먼트'\r\n    },\r\n    {\r\n        name: 'health',\r\n        text: '건강'\r\n    },\r\n    {\r\n        name: 'science',\r\n        text: '과학'\r\n    },\r\n    {\r\n        name: 'sports',\r\n        text: '스포츠'\r\n    },\r\n    {\r\n        name: 'technology',\r\n        text: '기술'\r\n    }\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n    display: flex;\r\n    padding: 1rem;\r\n    width: 768px;\r\n    margin: 0 auto;\r\n    @media screen and (max-width: 768px) {\r\n        width: 100%;\r\n        overflow-x: auto;\r\n    }\r\n`;\r\n\r\nconst Category = styled.div`\r\n    font-size: 1.125rem;\r\n    cursor: pointer;\r\n    white-space: pre;\r\n    text-decoration: none;\r\n    color: inherit;\r\n    padding-bottom: 0.25rem;\r\n\r\n    &:hover {\r\n        color: #495057;\r\n    }\r\n\r\n    ${props =>\r\n    props.active && css`\r\n    font-weight: 600;\r\n    border-bottom: 2px solid #22b8cf;\r\n    color: #22b8cf;\r\n    &:hover {\r\n        color: #3bc9db;\r\n    }\r\n`}\r\n\r\n    & + & {\r\n        margin-left: 1rem;\r\n    }\r\n`;\r\nconst Categories = ({ onSelect, category }) => {\r\n    return (\r\n        <CategoriesBlock>\r\n            {categories.map(c => (\r\n                <Category \r\n                key={c.name}\r\n                active={category === c.name}\r\n                onClick={() => onSelect(c.name)}\r\n                >\r\n                    {c.text}\r\n                </Category>\r\n            ))}\r\n        </CategoriesBlock>\r\n    );\r\n};\r\n\r\nexport default Categories;","import React, { useState, useCallback } from 'react';\nimport NewsList from './components/NewsList';\nimport Categories from './components/Categories';\n\nconst App = () => {\n  const [category, setCategory] = useState('all');\n  const onSelect = useCallback(category => setCategory(category), []);\n  return (\n  <>\n  <Categories category={category} onSelect={onSelect} />\n  <NewsList category={category} />\n  </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}